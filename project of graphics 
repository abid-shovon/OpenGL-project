#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <cmath>

// Window dimensions
const GLint WIDTH = 800, HEIGHT = 600;

// Circle parameters
GLfloat circleX = -0.8f;
GLfloat circleY = -0.7f;
GLfloat circleRadius = 0.05f;

// Road parameters
GLfloat roadWidth = 1.6f;
GLfloat roadHeight = 0.4f;

// Animation parameters
GLfloat animationSpeed = 0.005f;

void drawCircle(GLfloat x, GLfloat y, GLfloat radius) {
    int numSegments = 100;
    glBegin(GL_TRIANGLE_FAN);
    for (int i = 0; i < numSegments; i++) {
        GLfloat theta = 2.0f * M_PI * GLfloat(i) / GLfloat(numSegments);
        GLfloat cx = radius * cosf(theta);
        GLfloat cy = radius * sinf(theta);
        glVertex2f(x + cx, y + cy);
    }
    glEnd();
}

void drawRoad() {
    glColor3f(0.2f, 0.2f, 0.2f); // Grey color for road
    glBegin(GL_POLYGON);
    glVertex2f(-1.0f, -0.5f);
    glVertex2f(-1.0f, -1.0f);
    glVertex2f(1.0f, -1.0f);
    glVertex2f(1.0f, -0.5f);
    glEnd();
}

void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, GLFW_TRUE);
    }
}

void update() {
    // Move the circle along the road
    circleX += animationSpeed;
    if (circleX > (1.0f + circleRadius)) {
        circleX = -1.0f - circleRadius;
    }
}

void renderScene() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    drawRoad();
    
    glColor3f(1.0f, 0.0f, 0.0f); // Red color for circle (car)
    drawCircle(circleX, circleY, circleRadius);

    glfwSwapBuffers();
}

int main() {
    // Initialize GLFW
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return -1;
    }

    // Create a GLFW window
    GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "OpenGL Road with Moving Circle", nullptr, nullptr);
    if (!window) {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    // Set up GLEW
    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to initialize GLEW" << std::endl;
        return -1;
    }

    // Set the OpenGL viewport size
    glViewport(0, 0, WIDTH, HEIGHT);

    // Set GLFW callback functions
    glfwSetKeyCallback(window, keyCallback);

    // Set OpenGL options
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0f, 1.0f, -1.0f, 1.0f, -1.0f, 1.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    // Main loop
    while (!glfwWindowShouldClose(window)) {
        // Update
        update();

        // Render
        renderScene();

        // Poll for and process events
        glfwPollEvents();
    }

    // Clean up GLFW
    glfwTerminate();

    return 0;
}